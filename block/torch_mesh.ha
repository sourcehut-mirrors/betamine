use glm;

// Torch vertex position mesh separated into six quads.
// 2x10x2 cuboid centered in the voxel, to be warped/translated by the mesh code
// later on if it's affixed to a wall
const torch_mesh = _cube_mesh {
	top = [
		[2.0 / 16.0 + 7.0 / 16.0, 10.0 / 16.0, 2.0 / 16.0 + 7.0 / 16.0],
		[2.0 / 16.0 + 7.0 / 16.0, 10.0 / 16.0, 0.0 / 16.0 + 7.0 / 16.0],
		[0.0 / 16.0 + 7.0 / 16.0, 10.0 / 16.0, 0.0 / 16.0 + 7.0 / 16.0],
		[2.0 / 16.0 + 7.0 / 16.0, 10.0 / 16.0, 2.0 / 16.0 + 7.0 / 16.0],
		[0.0 / 16.0 + 7.0 / 16.0, 10.0 / 16.0, 0.0 / 16.0 + 7.0 / 16.0],
		[0.0 / 16.0 + 7.0 / 16.0, 10.0 / 16.0, 2.0 / 16.0 + 7.0 / 16.0],
	],
	bottom = [
		[0.0 / 16.0 + 7.0 / 16.0,  0.0 / 16.0, 0.0 / 16.0 + 7.0 / 16.0],
		[2.0 / 16.0 + 7.0 / 16.0,  0.0 / 16.0, 0.0 / 16.0 + 7.0 / 16.0],
		[2.0 / 16.0 + 7.0 / 16.0,  0.0 / 16.0, 2.0 / 16.0 + 7.0 / 16.0],
		[0.0 / 16.0 + 7.0 / 16.0,  0.0 / 16.0, 2.0 / 16.0 + 7.0 / 16.0],
		[0.0 / 16.0 + 7.0 / 16.0,  0.0 / 16.0, 0.0 / 16.0 + 7.0 / 16.0],
		[2.0 / 16.0 + 7.0 / 16.0,  0.0 / 16.0, 2.0 / 16.0 + 7.0 / 16.0],
	],
	north = [
		[2.0 / 16.0 + 7.0 / 16.0,  0.0 / 16.0, 0.0 / 16.0 + 7.0 / 16.0],
		[0.0 / 16.0 + 7.0 / 16.0, 10.0 / 16.0, 0.0 / 16.0 + 7.0 / 16.0],
		[2.0 / 16.0 + 7.0 / 16.0, 10.0 / 16.0, 0.0 / 16.0 + 7.0 / 16.0],
		[2.0 / 16.0 + 7.0 / 16.0,  0.0 / 16.0, 0.0 / 16.0 + 7.0 / 16.0],
		[0.0 / 16.0 + 7.0 / 16.0,  0.0 / 16.0, 0.0 / 16.0 + 7.0 / 16.0],
		[0.0 / 16.0 + 7.0 / 16.0, 10.0 / 16.0, 0.0 / 16.0 + 7.0 / 16.0],
	],
	east = [
		[2.0 / 16.0 + 7.0 / 16.0, 10.0 / 16.0, 2.0 / 16.0 + 7.0 / 16.0],
		[2.0 / 16.0 + 7.0 / 16.0,  0.0 / 16.0, 2.0 / 16.0 + 7.0 / 16.0],
		[2.0 / 16.0 + 7.0 / 16.0,  0.0 / 16.0, 0.0 / 16.0 + 7.0 / 16.0],
		[2.0 / 16.0 + 7.0 / 16.0, 10.0 / 16.0, 0.0 / 16.0 + 7.0 / 16.0],
		[2.0 / 16.0 + 7.0 / 16.0, 10.0 / 16.0, 2.0 / 16.0 + 7.0 / 16.0],
		[2.0 / 16.0 + 7.0 / 16.0,  0.0 / 16.0, 0.0 / 16.0 + 7.0 / 16.0],
	],
	west = [
		[0.0 / 16.0 + 7.0 / 16.0,  0.0 / 16.0, 0.0 / 16.0 + 7.0 / 16.0],
		[0.0 / 16.0 + 7.0 / 16.0,  0.0 / 16.0, 2.0 / 16.0 + 7.0 / 16.0],
		[0.0 / 16.0 + 7.0 / 16.0, 10.0 / 16.0, 2.0 / 16.0 + 7.0 / 16.0],
		[0.0 / 16.0 + 7.0 / 16.0,  0.0 / 16.0, 0.0 / 16.0 + 7.0 / 16.0],
		[0.0 / 16.0 + 7.0 / 16.0, 10.0 / 16.0, 2.0 / 16.0 + 7.0 / 16.0],
		[0.0 / 16.0 + 7.0 / 16.0, 10.0 / 16.0, 0.0 / 16.0 + 7.0 / 16.0],
	],
	south = [
		[2.0 / 16.0 + 7.0 / 16.0, 10.0 / 16.0, 2.0 / 16.0 + 7.0 / 16.0],
		[0.0 / 16.0 + 7.0 / 16.0, 10.0 / 16.0, 2.0 / 16.0 + 7.0 / 16.0],
		[2.0 / 16.0 + 7.0 / 16.0,  0.0 / 16.0, 2.0 / 16.0 + 7.0 / 16.0],
		[0.0 / 16.0 + 7.0 / 16.0, 10.0 / 16.0, 2.0 / 16.0 + 7.0 / 16.0],
		[0.0 / 16.0 + 7.0 / 16.0,  0.0 / 16.0, 2.0 / 16.0 + 7.0 / 16.0],
		[2.0 / 16.0 + 7.0 / 16.0,  0.0 / 16.0, 2.0 / 16.0 + 7.0 / 16.0],
	],
};

type _torch_uv = struct {
	top: [6]glm::v2,
	bottom: [6]glm::v2,
	north: [6]glm::v2,
	east: [6]glm::v2,
	south: [6]glm::v2,
	west: [6]glm::v2,
};

// Torch vertex UV mesh separated into six quads.
const torch_uv = _torch_uv {
	top = [
		[9.0 / 256.0,	88.0 / 256.0],
		[9.0 / 256.0,	86.0 / 256.0],
		[7.0 / 256.0,	86.0 / 256.0],
		[9.0 / 256.0,	88.0 / 256.0],
		[7.0 / 256.0,	86.0 / 256.0],
		[7.0 / 256.0,	88.0 / 256.0],
	],
	bottom = [
		[9.0 / 256.0,	88.0 / 256.0],
		[7.0 / 256.0,	88.0 / 256.0],
		[7.0 / 256.0,	90.0 / 256.0],
		[9.0 / 256.0,	90.0 / 256.0],
		[9.0 / 256.0,	88.0 / 256.0],
		[7.0 / 256.0,	90.0 / 256.0],
	],
	north = [
		[7.0 / 256.0,	96.0 / 256.0],
		[9.0 / 256.0,	86.0 / 256.0],
		[7.0 / 256.0,	86.0 / 256.0],
		[7.0 / 256.0,	96.0 / 256.0],
		[9.0 / 256.0,	96.0 / 256.0],
		[9.0 / 256.0,	86.0 / 256.0],
	],
	east = [
		[7.0 / 256.0,	86.0 / 256.0],
		[7.0 / 256.0,	96.0 / 256.0],
		[9.0 / 256.0,	96.0 / 256.0],
		[9.0 / 256.0,	86.0 / 256.0],
		[7.0 / 256.0,	86.0 / 256.0],
		[9.0 / 256.0,	96.0 / 256.0],
	],
	west = [
		[7.0 / 256.0,	96.0 / 256.0],
		[9.0 / 256.0,	96.0 / 256.0],
		[9.0 / 256.0,	86.0 / 256.0],
		[7.0 / 256.0,	96.0 / 256.0],
		[9.0 / 256.0,	86.0 / 256.0],
		[7.0 / 256.0,	86.0 / 256.0],
	],
	south = [
		[9.0 / 256.0,	86.0 / 256.0],
		[7.0 / 256.0,	86.0 / 256.0],
		[9.0 / 256.0,	96.0 / 256.0],
		[7.0 / 256.0,	86.0 / 256.0],
		[7.0 / 256.0,	96.0 / 256.0],
		[9.0 / 256.0,	96.0 / 256.0],
	],
};
