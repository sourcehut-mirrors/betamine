use glm;

// Closed piston model (model_cube)

def SP_TOP: (int, int) = (10, 6);	// Sticky top
def PS_TOP: (int, int) = (11, 6);	// Normal top
def OP_TOP: (int, int) = (14, 6);	// Open piston top
def PS_BOT: (int, int) = (13, 6);	// Bottom
def PS_SID: (int, int) = (12, 6);	// Side
def PS_SDR: (int, int) = (12, -7);	// Side, reversed

// UVs for various piston orientations
const piston_uv = [
	// top     bottom  north   south   west    east
	[  PS_BOT, PS_TOP, PS_SDR, PS_SDR, PS_SDR, PS_SDR  ], // 0x00: Down
	[  PS_TOP, PS_BOT, PS_SID, PS_SID, PS_SID, PS_SID  ], // 0x01: Up
	[  PS_SID, PS_SID, PS_TOP, PS_BOT, PS_SID, PS_SID  ], // 0x00: North
	[  PS_SDR, PS_SDR, PS_BOT, PS_TOP, PS_SDR, PS_SDR  ], // 0x02: South
	[  PS_SID, PS_SID, PS_SDR, PS_SDR, PS_TOP, PS_BOT  ], // 0x03: West
	[  PS_SDR, PS_SDR, PS_SID, PS_SID, PS_BOT, PS_TOP  ], // 0x04: East
];

// UVs for various sticky piston orientations
const spiston_uv = [
	// top     bottom  north   south   west    east
	[  PS_BOT, SP_TOP, PS_SDR, PS_SDR, PS_SDR, PS_SDR  ], // 0x00: Down
	[  SP_TOP, PS_BOT, PS_SID, PS_SID, PS_SID, PS_SID  ], // 0x01: Up
	[  PS_SID, PS_SID, SP_TOP, PS_BOT, PS_SID, PS_SID  ], // 0x00: North
	[  PS_SDR, PS_SDR, PS_BOT, SP_TOP, PS_SDR, PS_SDR  ], // 0x02: South
	[  PS_SID, PS_SID, PS_SDR, PS_SDR, SP_TOP, PS_BOT  ], // 0x03: West
	[  PS_SDR, PS_SDR, PS_SID, PS_SID, PS_BOT, SP_TOP  ], // 0x04: East
];

// Whether or not a given piston orientation requires rotating the UV's 90Â°
const piston_rotuv = [
	// top    bottom north  south  west   east
	[  false, false, false, false, false, false  ], // 0x00: Down
	[  false, false, false, false, false, false  ], // 0x01: Up
	[  false, false, false, false, true,  true   ], // 0x00: North
	[  false, false, false, false, true,  true   ], // 0x02: South
	[  true,  true,  true,  true,  false, false  ], // 0x03: West
	[  true,  true,  true,  true,  false, false  ], // 0x04: East
];

// Open piston model (model_piston)
const piston_open_vertex: [_]glm::v3 = [
	[1.000000, 1.000000, 0.250000],
	[1.000000, 0.000000, 0.250000],
	[1.000000, 1.000000, 1.000000],
	[1.000000, 0.000000, 1.000000],
	[0.000000, 1.000000, 0.250000],
	[0.000000, 0.000000, 0.250000],
	[0.000000, 1.000000, 1.000000],
	[0.000000, 0.000000, 1.000000],
];

const piston_open_normal: [_]glm::v3 = [
	[-0.0000,  1.0000, -0.0000],
	[-0.0000, -0.0000,  1.0000],
	[-1.0000, -0.0000, -0.0000],
	[-0.0000, -1.0000, -0.0000],
	[ 1.0000, -0.0000, -0.0000],
	[-0.0000, -0.0000, -1.0000],
];

const piston_open_uv: [_]glm::v2 = [
	[0.750000, 0.609332],
	[0.812457, 0.562500],
	[0.812457, 0.609332],
	[0.875000, 0.562457],
	[0.812543, 0.624913],
	[0.812543, 0.562457],
	[0.750043, 0.609418],
	[0.812500, 0.562587],
	[0.812500, 0.609418],
	[0.750087, 0.609332],
	[0.812543, 0.562500],
	[0.812543, 0.609332],
	[0.750043, 0.609332],
	[0.812500, 0.562500],
	[0.812500, 0.609332],
	[0.937500, 0.562543],
	[0.875043, 0.625000],
	[0.875043, 0.562543],
	[0.750000, 0.562500],
	[0.875000, 0.624913],
	[0.750043, 0.562587],
	[0.750087, 0.562500],
	[0.750043, 0.562500],
	[0.937500, 0.625000],
];

const piston_open_indicies: [][3](uint, uint, uint) = [
	[(5, 1, 1), (3, 2, 1), (1, 3, 1)],
	[(3, 4, 2), (8, 5, 2), (4, 6, 2)],
	[(7, 7, 3), (6, 8, 3), (8, 9, 3)],
	[(2, 10, 4), (8, 11, 4), (6, 12, 4)],
	[(1, 13, 5), (4, 14, 5), (2, 15, 5)],
	[(5, 16, 6), (2, 17, 6), (6, 18, 6)],
	[(5, 1, 1), (7, 19, 1), (3, 2, 1)],
	[(3, 4, 2), (7, 20, 2), (8, 5, 2)],
	[(7, 7, 3), (5, 21, 3), (6, 8, 3)],
	[(2, 10, 4), (4, 22, 4), (8, 11, 4)],
	[(1, 13, 5), (3, 23, 5), (4, 14, 5)],
	[(5, 16, 6), (1, 24, 6), (2, 17, 6)],
];

// Plunger model (model_piston_head)
const plunger_vertex: [_]glm::v3 = [
	[0.000000, 0.000000, 0.250000],
	[0.000000, 1.000000, 0.250000],
	[0.000000, 0.000000, 0.000000],
	[0.000000, 1.000000, 0.000000],
	[1.000000, 0.000000, 0.250000],
	[1.000000, 1.000000, 0.250000],
	[1.000000, 0.000000, 0.000000],
	[1.000000, 1.000000, 0.000000],
	[0.375000, 0.375000, 0.250000],
	[0.375000, 0.625000, 0.250000],
	[0.625000, 0.625000, 0.250000],
	[0.625000, 0.375000, 0.250000],
	[0.375000, 0.375000, 1.250000],
	[0.375000, 0.625000, 1.250000],
	[0.625000, 0.625000, 1.250000],
	[0.625000, 0.375000, 1.250000],
];

const plunger_normal: [_]glm::v3 = [
	[-1.0000, -0.0000, -0.0000],
	[-0.0000, -0.0000, -1.0000],
	[ 1.0000, -0.0000, -0.0000],
	[-0.0000, -0.0000,  1.0000],
	[-0.0000, -1.0000, -0.0000],
	[-0.0000,  1.0000, -0.0000],
];

const plunger_uv: []glm::v2 = [
	[0.750000, 0.609375],
	[0.812500, 0.625000],
	[0.812500, 0.609375],
	[0.687500, 0.625000],
	[0.750000, 0.562500],
	[0.687500, 0.562500],
	[0.750000, 0.625000],
	[0.710938, 0.601562],
	[0.710938, 0.585938],
	[0.726562, 0.601562],
	[0.726562, 0.585938],
];

const plunger_sticky_uv: []glm::v2 = [
	[0.750000, 0.609375],
	[0.812500, 0.625000],
	[0.812500, 0.609375],
	[0.625000, 0.625000],
	[0.687500, 0.562500],
	[0.625000, 0.562500],
	[0.750000, 0.625000],
	[0.710938, 0.601562],
	[0.687500, 0.625000],
	[0.750000, 0.562500],
	[0.710938, 0.585938],
	[0.726562, 0.601562],
	[0.726562, 0.585938],
];

// vertex/uv/normal
const plunger_indicies: [][3](uint, uint, uint) = [
	[(2, 1, 1), (3, 2, 1), (1, 3, 1)],
	[(4, 4, 2), (7, 5, 2), (3, 6, 2)],
	[(8, 7, 3), (5, 3, 3), (7, 2, 3)],
	[(1, 6, 4), (10, 8, 4), (2, 4, 4)],
	[(7, 2, 5), (1, 1, 5), (3, 7, 5)],
	[(4, 7, 6), (6, 3, 6), (8, 2, 6)],
	[(10, 2, 6), (15, 1, 6), (11, 3, 6)],
	[(5, 5, 4), (9, 9, 4), (1, 6, 4)],
	[(2, 4, 4), (11, 10, 4), (6, 7, 4)],
	[(6, 7, 4), (12, 11, 4), (5, 5, 4)],
	[(11, 2, 3), (16, 1, 3), (12, 3, 3)],
	[(12, 3, 5), (13, 7, 5), (9, 2, 5)],
	[(9, 3, 1), (14, 7, 1), (10, 2, 1)],
	[(2, 1, 1), (4, 7, 1), (3, 2, 1)],
	[(4, 4, 2), (8, 7, 2), (7, 5, 2)],
	[(8, 7, 3), (6, 1, 3), (5, 3, 3)],
	[(1, 6, 4), (9, 9, 4), (10, 8, 4)],
	[(7, 2, 5), (5, 3, 5), (1, 1, 5)],
	[(4, 7, 6), (2, 1, 6), (6, 3, 6)],
	[(10, 2, 6), (14, 7, 6), (15, 1, 6)],
	[(5, 5, 4), (12, 11, 4), (9, 9, 4)],
	[(2, 4, 4), (10, 8, 4), (11, 10, 4)],
	[(6, 7, 4), (11, 10, 4), (12, 11, 4)],
	[(11, 2, 3), (15, 7, 3), (16, 1, 3)],
	[(12, 3, 5), (16, 1, 5), (13, 7, 5)],
	[(9, 3, 1), (13, 1, 1), (14, 7, 1)],
];

const plunger_sticky_indicies: [][3](uint, uint, uint) = [
	[(2, 1, 1), (3, 2, 1), (1, 3, 1)],
	[(4, 4, 2), (7, 5, 2), (3, 6, 2)],
	[(8, 7, 3), (5, 3, 3), (7, 2, 3)],
	[(1, 5, 4), (10, 8, 4), (2, 9, 4)],
	[(7, 2, 5), (1, 1, 5), (3, 7, 5)],
	[(4, 7, 6), (6, 3, 6), (8, 2, 6)],
	[(10, 2, 6), (15, 1, 6), (11, 3, 6)],
	[(5, 10, 4), (9, 11, 4), (1, 5, 4)],
	[(2, 9, 4), (11, 12, 4), (6, 7, 4)],
	[(6, 7, 4), (12, 13, 4), (5, 10, 4)],
	[(11, 2, 3), (16, 1, 3), (12, 3, 3)],
	[(12, 3, 5), (13, 7, 5), (9, 2, 5)],
	[(9, 3, 1), (14, 7, 1), (10, 2, 1)],
	[(2, 1, 1), (4, 7, 1), (3, 2, 1)],
	[(4, 4, 2), (8, 9, 2), (7, 5, 2)],
	[(8, 7, 3), (6, 1, 3), (5, 3, 3)],
	[(1, 5, 4), (9, 11, 4), (10, 8, 4)],
	[(7, 2, 5), (5, 3, 5), (1, 1, 5)],
	[(4, 7, 6), (2, 1, 6), (6, 3, 6)],
	[(10, 2, 6), (14, 7, 6), (15, 1, 6)],
	[(5, 10, 4), (12, 13, 4), (9, 11, 4)],
	[(2, 9, 4), (10, 8, 4), (11, 12, 4)],
	[(6, 7, 4), (11, 12, 4), (12, 13, 4)],
	[(11, 2, 3), (15, 7, 3), (16, 1, 3)],
	[(12, 3, 5), (16, 1, 5), (13, 7, 5)],
	[(9, 3, 1), (13, 1, 1), (14, 7, 1)],
];
